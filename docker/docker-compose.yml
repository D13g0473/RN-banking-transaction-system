version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD-SHELL", "echo stat | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 9092 || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 10

  kafka-init:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      kafka:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Waiting for Kafka...' &&
        until kafka-topics --list --bootstrap-server kafka:9092; do
          echo 'Kafka not ready yet, waiting...' &&
          sleep 5
        done &&
        echo 'Creating topics...' &&
        kafka-topics --create --topic txn.commands --bootstrap-server kafka:9092 --partitions 3 --replication-factor 1 --if-not-exists &&
        kafka-topics --create --topic txn.events --bootstrap-server kafka:9092 --partitions 3 --replication-factor 1 --if-not-exists &&
        kafka-topics --create --topic txn.dlq --bootstrap-server kafka:9092 --partitions 3 --replication-factor 1 --if-not-exists &&
        echo 'Topics created.' &&
        exit 0
      "

  api:
    build: ../backend/api
    ports:
      - "3000:3000"
    depends_on:
      kafka-init:
        condition: service_completed_successfully
    environment:
      KAFKA_BROKERS: kafka:9092
    entrypoint: sh
    command: ["-c", "echo 'Waiting for Kafka...' && until nc -z kafka 9092; do echo 'Kafka not ready yet, waiting...' && sleep 5; done && echo 'Kafka ready! Starting API...' && npm run start:prod"]
    restart: unless-stopped

  orchestrator:
    build: ../backend/orchestrator
    depends_on:
      kafka-init:
        condition: service_completed_successfully
    environment:
      KAFKA_BROKERS: kafka:9092
    entrypoint: sh
    command: ["-c", "echo 'Waiting for Kafka...' && until nc -z kafka 9092; do echo 'Kafka not ready yet, waiting...' && sleep 5; done && echo 'Kafka ready! Starting Orchestrator...' && npm run start:prod"]
    restart: unless-stopped

  gateway:
    build: ../backend/gateway
    ports:
      - "8080:8080"
    depends_on:
      kafka-init:
        condition: service_completed_successfully
    environment:
      KAFKA_BROKERS: kafka:9092
    entrypoint: sh
    command: ["-c", "echo 'Waiting for Kafka...' && until nc -z kafka 9092; do echo 'Kafka not ready yet, waiting...' && sleep 5; done && echo 'Kafka ready! Starting Gateway...' && npm run start:prod"]
    restart: unless-stopped

volumes:
  kafka-data:
